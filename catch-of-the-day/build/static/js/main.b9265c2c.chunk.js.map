{"version":3,"sources":["helpers.js","components/StorePicker.js","components/Header.js","components/Order.js","components/AddFishForm.js","components/EditFishForm.js","components/Login.js","base.js","components/Inventory.js","sample-fishes.js","components/Fish.js","components/App.js","components/NotFound.js","components/Router.js","index.js"],"names":["formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","concat","StorePicker","myInput","React","createRef","goToStore","event","preventDefault","storeName","_this","current","value","props","history","push","react_default","a","createElement","className","onSubmit","this","type","ref","required","placeholder","defaultValue","Component","Header","tagline","Order","renderOrder","key","fish","fishes","count","order","isAvailable","status","transitionOptions","classNames","timeout","enter","exit","react_transition_group","component","name","price","onClick","removeFromOrder","_this2","orderIds","Object","keys","total","reduce","prevTotal","map","AddFishForm","nameRef","priceRef","statusRef","descRef","imageRef","createFish","parseFloat","desc","image","addFish","currentTarget","reset","EditFishForm","handelChange","updatedFish","objectSpread","defineProperty","updateFish","index","_this$props$fish","onChange","deleteFish","Login","authenticate","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","Inventory","state","uid","owner","authHandler","_callee","authData","store","regenerator_default","wrap","_context","prev","next","fetch","storeId","context","assertThisInitialized","sent","post","data","user","setState","stop","provider","authProvider","auth","signInWithPopup","then","logout","_callee2","_context2","signOut","onAuthStateChanged","_this3","components_EditFishForm","components_AddFishForm","loadSampleFishes","components_Login","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","Fish","_this$props$details","details","src","alt","disabled","addToOrder","App","Date","now","sampleFishes","params","match","localStorageRef","localStorage","getItem","storeid","JSON","parse","syncState","removeBinding","setItem","stringify","components_Header","components_Fish","components_Order","components_Inventory","NotFound","Router","BrowserRouter","Switch","Route","exact","path","render","components_Router","document","querySelector"],"mappings":"gPAAO,SAASA,EAAYC,GAC1B,OAAQA,EAAQ,KAAKC,eAAe,QAAS,CAC3CC,MAAO,WACPC,SAAU,QAIP,SAASC,EAAMC,GACpB,OAAOA,EAAIC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,SAcrC,SAASC,IACd,IAAMC,EAAa,CACjB,WACA,YACA,QACA,OACA,UACA,QACA,YACA,WACA,OACA,cACA,gBACA,QACA,SACA,YACA,UACA,YACA,QACA,aACA,SACA,WACA,cACA,SACA,SACA,WACA,QACA,UACA,OACA,aACA,UACA,YACA,UACA,YACA,QACA,cACA,UACA,WAoCF,SAAAC,OAAUR,EAAMO,GAAhB,KAAAC,OAA+BR,EAAMO,GAArC,KAAAC,OAAoDR,EAjCtC,CACZ,QACA,MACA,WACA,QACA,OACA,SACA,SACA,OACA,QACA,SACA,SACA,QACA,QACA,QACA,SACA,WACA,WACA,QACA,OACA,QACA,SACA,aACA,WACA,YACA,QACA,SACA,SACA,YACA,WACA,cCkBWS,6MAtFbC,QAAUC,IAAMC,cAiBhBC,UAAY,SAAAC,GAEVA,EAAMC,iBAgBN,IAAMC,EAAYC,EAAKP,QAAQQ,QAAQC,MAOvCF,EAAKG,MAAMC,QAAQC,KAAnB,UAAAd,OAAkCQ,6EAQlC,OAaEO,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBC,SAAUC,KAAKf,WAE9CU,EAAAC,EAAAC,cAAA,kCAQAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLC,IAAKF,KAAKlB,QACVqB,UAAQ,EACRC,YAAY,aACZC,aAAc3B,MAEhBiB,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,0BApGkBlB,IAAMuB,mBCmDjBC,EA5CA,SAAAf,GAEb,OACEG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAChBH,EAAAC,EAAAC,cAAA,kBAEEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAhB,MACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAhB,QAJJ,OAQAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,YAAOL,EAAMgB,oBC6ENC,6MAzFbC,YAAc,SAAAC,GACZ,IAAMC,EAAOvB,EAAKG,MAAMqB,OAAOF,GACzBG,EAAQzB,EAAKG,MAAMuB,MAAMJ,GACzBK,EAAcJ,GAAwB,cAAhBA,EAAKK,OAC3BC,EAAoB,CACxBC,WAAY,QACZR,MACAS,QAAS,CAAEC,MAAO,IAAMC,KAAM,MAOhC,OAAKV,EACAI,EAeHrB,EAAAC,EAAAC,cAAC0B,EAAA,cAAkBL,EACjBvB,EAAAC,EAAAC,cAAA,MAAIc,IAAKA,GACPhB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAC0B,EAAA,gBAAD,CAAiBC,UAAU,OAAO1B,UAAU,SAC1CH,EAAAC,EAAAC,cAAC0B,EAAA,cAAD,CACEJ,WAAW,QACXR,IAAKG,EACLM,QAAS,CAAEC,MAAO,IAAMC,KAAM,MAE9B3B,EAAAC,EAAAC,cAAA,YAAOiB,KAPb,OAUOF,EAAKa,KACT1D,EAAY+C,EAAQF,EAAKc,OAC1B/B,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAMtC,EAAKG,MAAMoC,gBAAgBjB,KAAlD,WAtBJhB,EAAAC,EAAAC,cAAC0B,EAAA,cAAkBL,EACjBvB,EAAAC,EAAAC,cAAA,MAAIc,IAAKA,GAAT,SACSC,EAAOA,EAAKa,KAAO,OAD5B,4BATY,8EAsCX,IAAAI,EAAA7B,KACD8B,EAAWC,OAAOC,KAAKhC,KAAKR,MAAMuB,OASlCkB,EAAQH,EAASI,OAAO,SAACC,EAAWxB,GAExC,IAAMC,EAAOiB,EAAKrC,MAAMqB,OAAOF,GAEzBG,EAAQe,EAAKrC,MAAMuB,MAAMJ,GAG/B,OADoBC,GAAwB,cAAhBA,EAAKK,OAExBkB,EAAYrB,EAAQF,EAAKc,MAE3BS,GACN,GACH,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAC0B,EAAA,gBAAD,CAAiBC,UAAU,KAAK1B,UAAU,SACvCgC,EAASM,IAAIpC,KAAKU,cAErBf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,SAEEH,EAAAC,EAAAC,cAAA,cAAS9B,EAAYkE,aAzFXlD,IAAMuB,6DCqDX+B,6MAvDbC,QAAUvD,IAAMC,cAChBuD,SAAWxD,IAAMC,cACjBwD,UAAYzD,IAAMC,cAClByD,QAAU1D,IAAMC,cAChB0D,SAAW3D,IAAMC,cASjB2D,WAAa,SAAAzD,GAEXA,EAAMC,iBACN,IAAMyB,EAAO,CACXa,KAAMpC,EAAKiD,QAAQhD,QAAQC,MAC3BmC,MAAOkB,WAAWvD,EAAKkD,SAASjD,QAAQC,OACxC0B,OAAQ5B,EAAKmD,UAAUlD,QAAQC,MAC/BsD,KAAMxD,EAAKoD,QAAQnD,QAAQC,MAC3BuD,MAAOzD,EAAKqD,SAASpD,QAAQC,OAE/BF,EAAKG,MAAMuD,QAAQnC,GAEnB1B,EAAM8D,cAAcC,iFAIpB,OACEtD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYC,SAAUC,KAAK2C,YACzChD,EAAAC,EAAAC,cAAA,SAAO4B,KAAK,OAAOvB,IAAKF,KAAKsC,QAASrC,KAAK,OAAOG,YAAY,SAC9DT,EAAAC,EAAAC,cAAA,SACE4B,KAAK,QACLvB,IAAKF,KAAKuC,SACVtC,KAAK,OACLG,YAAY,UAEdT,EAAAC,EAAAC,cAAA,UAAQ4B,KAAK,SAASvB,IAAKF,KAAKwC,WAC9B7C,EAAAC,EAAAC,cAAA,UAAQN,MAAM,aAAd,SACAI,EAAAC,EAAAC,cAAA,UAAQN,MAAM,eAAd,cAEFI,EAAAC,EAAAC,cAAA,YAAU4B,KAAK,OAAOvB,IAAKF,KAAKyC,QAASrC,YAAY,SACrDT,EAAAC,EAAAC,cAAA,SACE4B,KAAK,QACLvB,IAAKF,KAAK0C,SACVzC,KAAK,OACLG,YAAY,UAEdT,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,sBAlDkBlB,IAAMuB,mBC6EjB4C,6MA9DbC,aAAe,SAAAjE,GAGb,IAAMkE,EAAWrB,OAAAsB,EAAA,EAAAtB,CAAA,GASZ1C,EAAKG,MAAMoB,KATCmB,OAAAuB,EAAA,EAAAvB,CAAA,GAUd7C,EAAM8D,cAAcvB,KAAOvC,EAAM8D,cAAczD,QAElDF,EAAKG,MAAM+D,WAAWlE,EAAKG,MAAMgE,MAAOJ,4EAEjC,IAAAvB,EAAA7B,KAAAyD,EACsCzD,KAAKR,MAAMoB,KAAhDiC,EADDY,EACCZ,KAAMC,EADPW,EACOX,MAAOrB,EADdgC,EACchC,KAAMC,EADpB+B,EACoB/B,MAAOT,EAD3BwC,EAC2BxC,OAClC,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLwB,KAAK,OACLiC,SAAU1D,KAAKmD,aACf5D,MAAOkC,IAET9B,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLwB,KAAK,QACLiC,SAAU1D,KAAKmD,aACf5D,MAAOmC,IAET/B,EAAAC,EAAAC,cAAA,UACEI,KAAK,OACLwB,KAAK,SACLiC,SAAU1D,KAAKmD,aACf5D,MAAO0B,GAEPtB,EAAAC,EAAAC,cAAA,UAAQN,MAAM,aAAd,SACAI,EAAAC,EAAAC,cAAA,UAAQN,MAAM,eAAd,cAEFI,EAAAC,EAAAC,cAAA,YACEI,KAAK,OACLwB,KAAK,QACLiC,SAAU1D,KAAKmD,aACf5D,MAAOuD,IAETnD,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLwB,KAAK,OACLiC,SAAU1D,KAAKmD,aACf5D,MAAOsD,IAETlD,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAME,EAAKrC,MAAMmE,WAAW9B,EAAKrC,MAAMgE,SAAxD,uBApEmBzE,IAAMuB,WCwBlBsD,EApBD,SAAApE,GAAK,OACjBG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAAS6B,QAAS,kBAAMnC,EAAMqE,aAAa,YAA7D,sBAGAlE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAU6B,QAAS,kBAAMnC,EAAMqE,aAAa,aAA9D,uBAGAlE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAW6B,QAAS,kBAAMnC,EAAMqE,aAAa,cAA/D,2CCdEC,EAAcC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,gDAaAC,EANFC,IAAOC,YAAYR,EAAYS,YCkG7BC,6MA9FbC,MAAQ,CACNC,IAAK,KACLC,MAAO,QAWTC,kDAAc,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAC,EAAApF,EAAAqF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEQhB,EAAKiB,MAAMhG,EAAKG,MAAM8F,QAAS,CAAEC,QAAQxD,OAAAyD,EAAA,EAAAzD,QAAAyD,EAAA,EAAAzD,CAAA1C,MAFjD,WAEN0F,EAFMG,EAAAO,MAKDd,MALC,CAAAO,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAOJhB,EAAKsB,KAAL,GAAA9G,OAAaS,EAAKG,MAAM8F,QAAxB,UAAyC,CAC7CK,KAAMb,EAASc,KAAKlB,MARZ,OAYZrF,EAAKwG,SAAS,CACZnB,IAAKI,EAASc,KAAKlB,IACnBC,MAAOI,EAAMJ,OAASG,EAASc,KAAKlB,MAd1B,wBAAAQ,EAAAY,SAAAjB,8DAkBdhB,aAAe,SAAAkC,GACb,IAAMC,EAAe,IAAIjC,IAASkC,KAAT,GAAArH,OAAiBmH,EAAjB,kBACzBjC,EACGmC,OACAC,gBAAgBF,GAChBG,KAAK9G,EAAKuF,gBAGfwB,4BAAS,SAAAC,IAAA,OAAArB,EAAApF,EAAAqF,KAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,cAAAkB,EAAAlB,KAAA,EACDrB,IAASkC,OAAOM,UADf,OAEPlH,EAAKwG,SAAS,CACZnB,IAAK,OAHA,wBAAA4B,EAAAR,SAAAO,yFAlCW,IAAAxE,EAAA7B,KAClB+D,IAASkC,OAAOO,mBAAmB,SAAAZ,GAC7BA,GACF/D,EAAK+C,YAAY,CAAEgB,4CAsChB,IAAAa,EAAAzG,KACDoG,EAASzG,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS3B,KAAKoG,QAAtB,YAGf,OAAKpG,KAAKyE,MAAMC,IAKZ1E,KAAKyE,MAAMC,MAAQ1E,KAAKyE,MAAME,MAE9BhF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yCACCuG,GAWLzG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,uBACCuG,EAIArE,OAAOC,KAAKhC,KAAKR,MAAMqB,QAAQuB,IAAI,SAAAzB,GAAG,OACrChB,EAAAC,EAAAC,cAAC6G,EAAD,CACE9F,KAAM6F,EAAKjH,MAAMqB,OAAOF,GACxB6C,MAAO7C,EACPA,IAAKA,EACL4C,WAAYkD,EAAKjH,MAAM+D,WACvBI,WAAY8C,EAAKjH,MAAMmE,eAG3BhE,EAAAC,EAAAC,cAAC8G,EAAD,CAAa5D,QAAS/C,KAAKR,MAAMuD,UACjCpD,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS3B,KAAKR,MAAMoH,kBAA5B,uBAnCKjH,EAAAC,EAAAC,cAACgH,EAAD,CAAOhD,aAAc7D,KAAK6D,sBA5Df9E,IAAMuB,WC2EfO,EAlFA,CACbiG,MAAO,CACLrF,KAAM,kBACNqB,MAAO,mBACPD,KACE,wFACFnB,MAAO,KACPT,OAAQ,aAGV8F,MAAO,CACLtF,KAAM,UACNqB,MAAO,sBACPD,KACE,iFACFnB,MAAO,KACPT,OAAQ,aAGV+F,MAAO,CACLvF,KAAM,eACNqB,MAAO,uBACPD,KACE,qGACFnB,MAAO,KACPT,OAAQ,eAGVgG,MAAO,CACLxF,KAAM,YACNqB,MAAO,mBACPD,KACE,kGACFnB,MAAO,KACPT,OAAQ,aAGViG,MAAO,CACLzF,KAAM,YACNqB,MAAO,mBACPD,KACE,2EACFnB,MAAO,KACPT,OAAQ,aAGVkG,MAAO,CACL1F,KAAM,kBACNqB,MAAO,qBACPD,KACE,0GACFnB,MAAO,KACPT,OAAQ,aAGVmG,MAAO,CACL3F,KAAM,UACNqB,MAAO,sBACPD,KAAM,oEACNnB,MAAO,KACPT,OAAQ,aAGVoG,MAAO,CACL5F,KAAM,UACNqB,MAAO,sBACPD,KACE,sFACFnB,MAAO,IACPT,OAAQ,aAGVqG,MAAO,CACL7F,KAAM,eACNqB,MAAO,qBACPD,KACE,8FACFnB,MAAO,KACPT,OAAQ,cC3BGsG,mLAlCJ,IAAAlI,EAAAW,KAAAwH,EAKsCxH,KAAKR,MAAMiI,QAAhD3E,EALD0E,EAKC1E,MAAOrB,EALR+F,EAKQ/F,KAAMC,EALd8F,EAKc9F,MAAOmB,EALrB2E,EAKqB3E,KACtB7B,EAAyB,cANxBwG,EAK2BvG,OAElC,OACEtB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,OAAK6H,IAAK5E,EAAO6E,IAAKlG,IACtB9B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACX2B,EAED9B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAS/B,EAAY2D,KAEvC/B,EAAAC,EAAAC,cAAA,SAAIgD,GAQJlD,EAAAC,EAAAC,cAAA,UACE+H,UAAW5G,EACXW,QAAS,kBAAMtC,EAAKG,MAAMqI,WAAWxI,EAAKG,MAAMgE,SAE/CxC,EAAc,gBAAkB,qBAzCxBjC,IAAMuB,WCyJVwH,6MAnJbrD,MAAQ,CACN5D,OAAQ,GACRE,MAAO,MAoCTgC,QAAU,SAAAnC,GAGR,IAAMC,EAAMkB,OAAAsB,EAAA,EAAAtB,CAAA,GAAQ1C,EAAKoF,MAAM5D,QAE/BA,EAAM,OAAAjC,OAAQmJ,KAAKC,QAAWpH,EAE9BvB,EAAKwG,SAAS,CAGZhF,cAIJ0C,WAAa,SAAC5C,EAAKyC,GAKjB,IAAMvC,EAAMkB,OAAAsB,EAAA,EAAAtB,CAAA,GAAQ1C,EAAKoF,MAAM5D,QAE/BA,EAAOF,GAAOyC,EAEd/D,EAAKwG,SAAS,CAAEhF,cAGlB8C,WAAa,SAAAhD,GAEX,IAAME,EAAMkB,OAAAsB,EAAA,EAAAtB,CAAA,GAAQ1C,EAAKoF,MAAM5D,QAE/BA,EAAOF,GAAO,KAEdtB,EAAKwG,SAAS,CAAEhF,cAGlB+F,iBAAmB,WACjBvH,EAAKwG,SAAS,CAAEhF,OAAQoH,OAG1BJ,WAAa,SAAAlH,GAEX,IAAMI,EAAKgB,OAAAsB,EAAA,EAAAtB,CAAA,GAAQ1C,EAAKoF,MAAM1D,OAG9BA,EAAMJ,GAAOI,EAAMJ,GAAO,GAAK,EAE/BtB,EAAKwG,SAAS,CAAE9E,aAGlBa,gBAAkB,SAAAjB,GAEhB,IAAMI,EAAKgB,OAAAsB,EAAA,EAAAtB,CAAA,GAAQ1C,EAAKoF,MAAM1D,cAKvBA,EAAMJ,GAEbtB,EAAKwG,SAAS,CAAE9E,8FAvFE,IACVmH,EAAWlI,KAAKR,MAAM2I,MAAtBD,OAEFE,EAAkBC,aAAaC,QAAQJ,EAAOK,SAChDH,GACFpI,KAAK6F,SAAS,CAAE9E,MAAOyH,KAAKC,MAAML,KAEpCpI,KAAKE,IAAMkE,EAAKsE,UAAL,GAAA9J,OAAkBsJ,EAAOK,QAAzB,WAA2C,CACpDhD,QAASvF,KACTyE,MAAO,0DAUTL,EAAKuE,cAAc3I,KAAKE,kDAIxBmI,aAAaO,QACX5I,KAAKR,MAAM2I,MAAMD,OAAOK,QACxBC,KAAKK,UAAU7I,KAAKyE,MAAM1D,yCAiErB,IAAAc,EAAA7B,KACP,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACiJ,EAAD,CAAQtI,QAAQ,yBAChBb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACXiC,OAAOC,KAAKhC,KAAKyE,MAAM5D,QAAQuB,IAAI,SAAAzB,GAAG,OACrChB,EAAAC,EAAAC,cAACkJ,EAAD,CACEpI,IAAKA,EAKL6C,MAAO7C,EACP8G,QAAS5F,EAAK4C,MAAM5D,OAAOF,GAC3BkH,WAAYhG,EAAKgG,YAEhBlH,OAKThB,EAAAC,EAAAC,cAACmJ,EAAD,CACEnI,OAAQb,KAAKyE,MAAM5D,OACnBE,MAAOf,KAAKyE,MAAM1D,MAClBa,gBAAiB5B,KAAK4B,kBAUxBjC,EAAAC,EAAAC,cAACoJ,EAAD,CACElG,QAAS/C,KAAK+C,QACd6D,iBAAkB5G,KAAK4G,iBACvB/F,OAAQb,KAAKyE,MAAM5D,OACnB0C,WAAYvD,KAAKuD,WACjBI,WAAY3D,KAAK2D,WACjB2B,QAAStF,KAAKR,MAAM2I,MAAMD,OAAOK,kBA7IzBxJ,IAAMuB,WCDT4I,EANE,kBACfvJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BCYWsJ,EAVA,kBACbxJ,EAAAC,EAAAC,cAACuJ,EAAA,EAAD,KACEzJ,EAAAC,EAAAC,cAACwJ,EAAA,EAAD,KACE1J,EAAAC,EAAAC,cAACyJ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIhI,UAAW3C,IACjCc,EAAAC,EAAAC,cAACyJ,EAAA,EAAD,CAAOE,KAAK,kBAAkBhI,UAAWsG,IACzCnI,EAAAC,EAAAC,cAACyJ,EAAA,EAAD,CAAO9H,UAAW0H,aCDxBO,iBAAO9J,EAAAC,EAAAC,cAAC6J,EAAD,MAAYC,SAASC,cAAc","file":"static/js/main.b9265c2c.chunk.js","sourcesContent":["export function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"wives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getFunName } from '../helpers';\n\nclass StorePicker extends React.Component {\n  static propTypes = {\n    history: PropTypes.object,\n  };\n  /*\n    Binding in ES6 with constructor component. This becomes a bummer if you need\n    to bind multiple things\n  */\n  // constructor() {\n  //   /*\n  //     Cannot run anything in a constructor before you call super. Super will\n  //     create the component we are extending first.\n  //   */\n  //   super();\n  //   // If it is not bound this will be undefined in goToStore\n  //   this.goToStore = this.goToStore.bind(this);\n  // }\n  /*\n    Creating the Ref here brings the text input to the surface of the component\n  */\n  myInput = React.createRef();\n  //Below was used to illustrate how events are handled in React\n  /*\n  handelClick() {\n    alert('hey');\n  }\n  */\n\n  /*\n    Instead of using the constructor we can change this method. Instead of\n    declaring a method on the component we declare a property that is set to an\n    arrow function. The property is bound to the instance rather than nothing.\n    goToStore is a property on the component just like myInput and we set it to\n    the arrow function which will allow us to bind this to the component. If you\n    need to access this inside of a method you need to do below syntax or above\n    constructor.\n  */\n  goToStore = event => {\n    // 1. Stop the form from submitting\n    event.preventDefault();\n    // 2. get the text from the input\n    /*\n    Sorta golden rule of React is to not touch the DOM. AKA Don't manually select\n    the elements. Two ways to get data from an input Refs and State. Generally\n    want to use state if your going to be syncing you data.\n    */\n    /* BINDING IN REACT\n    If we tried to go into the render method and clg this we would get the store\n    picker component. However, when trying to clg this in the goToStore we get\n    this as undefined. All of the methods that come with React all the built in\n    methods are in the momma component which is React.Component. If we make our\n    own component that extends to React.Component and any methods we add on top\n    of StorePicker in this case are not bound by default. SOLUTION bind our own\n    methods!\n   */\n    const storeName = this.myInput.current.value;\n    // 3. Change the page to /store/whatever-they-entered\n    /*\n      We will use react router here to change the page without refreshing using\n      push state. Because React Router is the parent we have access to the props\n      it from the parent. In this case props.history.push\n    */\n    this.props.history.push(`/store/${storeName}`);\n  };\n  /* Every class in React must have one method in it and that is Render */\n  render() {\n    /*\n    We don't ever touch the DOM in react outside of when we mount the\n    entire application\n    */\n    return (\n      /* In order to get things to align correctly we will return () so that the\n      form element returns on a new line */\n      // <p>Fish</p>\n      /*\n      Can not return p tag above because it is a sibling element. In JSX you\n      could put them all inside a tag but can only return one element\n      */\n      /*\n      This can be a problem when using CSS grid or Flexbox and you need to return\n      multiple children elements with no wrapper. The solution is React.Fragment\n      tag. You can also now use an empty tag to wrap the elements.\n     */\n      <form className=\"store-selector\" onSubmit={this.goToStore}>\n        {/* This is a comment in JSX where it uses the bracket */}\n        <h2>Please Enter A Store</h2>\n        {/*\n        Events are handled inline in react like the example below. The\n        onClick event then calls the handelClick function scoped to this class.\n        You don't want to add () after the function because that will call it on\n        page load.\n         */}\n        {/* <button onClick={this.handelClick}>Click me</button> */}\n        <input\n          type=\"text\"\n          ref={this.myInput}\n          required\n          placeholder=\"Store Name\"\n          defaultValue={getFunName()}\n        />\n        <button type=\"submit\">Visit Store -></button>\n      </form>\n    );\n  }\n}\n// Exported the StorePicker so we can use it in the index.js file\nexport default StorePicker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n/* If your component only has a render method and prop types then it can be\nconverted to a stateless functional component. If it is just something that gets\npassed in data via props and returns some JSX then you may want to use a Stateless\nFunctional Component. It will save some lines of code and improve performance.\n*/\n\n// function Header(props) {\n/* Can change above to be an arrow function. We could then add onto this and\nmake it an implicit return by removing the curly bracket and the return */\nconst Header = props => {\n  // const Header = {tagline} => { using this syntax you can destructor you props\n  return (\n    <header className=\"top\">\n      <h1>\n        Catch\n        <span className=\"ofThe\">\n          <span className=\"of\">of</span>\n          <span className=\"the\">the</span>\n        </span>\n        Day\n      </h1>\n      <h3 className=\"tagline\">\n        <span>{props.tagline}</span>\n      </h3>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  tagline: PropTypes.string.isRequired,\n};\n\n/*\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"top\">\n        <h1>\n          Catch\n          <span className=\"ofThe\">\n            <span className=\"of\">of</span>\n            <span className=\"the\">the</span>\n          </span>\n          Day\n        </h1>\n        <h3 className=\"tagline\">\n          <span>{this.props.tagline}</span>\n        </h3>\n      </header>\n    );\n  }\n}\n */\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { formatPrice } from '../helpers';\n\nclass Order extends React.Component {\n  static propTypes = {\n    fishes: PropTypes.object,\n    order: PropTypes.object,\n    removeFromOrder: PropTypes.func,\n  };\n\n  renderOrder = key => {\n    const fish = this.props.fishes[key];\n    const count = this.props.order[key];\n    const isAvailable = fish && fish.status === 'available';\n    const transitionOptions = {\n      classNames: 'order',\n      key,\n      timeout: { enter: 5000, exit: 5000 },\n    };\n    /*\n      Adding the fish && (above) to make sure there is a fish before checking if it is\n      available and checking if there is no fish and returning null (below) ensures\n      that there is a fish before trying to set the order state from local storage.\n    */\n    if (!fish) return null;\n    if (!isAvailable) {\n      /*\n        Hick-up here by not returning the JSX. Caused it to fail with error\n        \"Expected an assignment or function call and instead saw an expression\n        no-unused-expressions\"\n      */\n      return (\n        <CSSTransition {...transitionOptions}>\n          <li key={key}>\n            Sorry {fish ? fish.name : 'fish'} is no longer available\n          </li>\n        </CSSTransition>\n      );\n    }\n    return (\n      <CSSTransition {...transitionOptions}>\n        <li key={key}>\n          <span>\n            <TransitionGroup component=\"span\" className=\"count\">\n              <CSSTransition\n                classNames=\"count\"\n                key={count}\n                timeout={{ enter: 5000, exit: 5000 }}\n              >\n                <span>{count}</span>\n              </CSSTransition>\n            </TransitionGroup>\n            lbs {fish.name}\n            {formatPrice(count * fish.price)}\n            <button onClick={() => this.props.removeFromOrder(key)}>\n              &times;\n            </button>\n          </span>\n        </li>\n      </CSSTransition>\n    );\n  };\n  render() {\n    const orderIds = Object.keys(this.props.order);\n    /*\n      Reduce is sorta like a for loop or a map but instead of returning a\n      new item like from a map or instead of looping and updating an external\n      variable like a for loop. Reduce will take in some data and return sorta\n      like a tally. It can do a lot more than just return a tally. When using\n      reduce you do need to pass in a starting value at the end of the function\n    */\n    // prevTotal is like a tally and the key is fish1, fish2, etc\n    const total = orderIds.reduce((prevTotal, key) => {\n      // grabbing the actual fish we are looping over\n      const fish = this.props.fishes[key];\n      // How many of the fish they are buying\n      const count = this.props.order[key];\n\n      const isAvailable = fish && fish.status === 'available';\n      if (isAvailable) {\n        return prevTotal + count * fish.price;\n      }\n      return prevTotal;\n    }, 0);\n    return (\n      <div className=\"order-wrap\">\n        <h2>Orders</h2>\n        <TransitionGroup component=\"ul\" className=\"order\">\n          {orderIds.map(this.renderOrder)}\n        </TransitionGroup>\n        <div className=\"total\">\n          Total:\n          <strong>{formatPrice(total)}</strong>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Order;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nclass AddFishForm extends React.Component {\n  nameRef = React.createRef();\n  priceRef = React.createRef();\n  statusRef = React.createRef();\n  descRef = React.createRef();\n  imageRef = React.createRef();\n\n  static propTypes = {\n    addFish: PropTypes.func,\n  };\n  /*\n    The createFish property is another example of using the arrow function\n    syntax to create a\n  */\n  createFish = event => {\n    // 1. Stop the form from submitting\n    event.preventDefault();\n    const fish = {\n      name: this.nameRef.current.value,\n      price: parseFloat(this.priceRef.current.value),\n      status: this.statusRef.current.value,\n      desc: this.descRef.current.value,\n      image: this.imageRef.current.value,\n    };\n    this.props.addFish(fish);\n    // refresh the form\n    event.currentTarget.reset();\n  };\n\n  render() {\n    return (\n      <form className=\"fish-edit\" onSubmit={this.createFish}>\n        <input name=\"name\" ref={this.nameRef} type=\"text\" placeholder=\"Name\" />\n        <input\n          name=\"price\"\n          ref={this.priceRef}\n          type=\"text\"\n          placeholder=\"Price\"\n        />\n        <select name=\"status\" ref={this.statusRef}>\n          <option value=\"available\">Fresh</option>\n          <option value=\"unavailable\">Sold Out!</option>\n        </select>\n        <textarea name=\"desc\" ref={this.descRef} placeholder=\"Desc\" />\n        <input\n          name=\"image\"\n          ref={this.imageRef}\n          type=\"text\"\n          placeholder=\"Image\"\n        />\n        <button type=\"submit\">+ Add Fish</button>\n      </form>\n    );\n  }\n}\n\nexport default AddFishForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass EditFishForm extends React.Component {\n  static propTypes = {\n    deleteFish: PropTypes.func,\n    updateFish: PropTypes.func,\n    index: PropTypes.string,\n    fish: PropTypes.shape({\n      image: PropTypes.string,\n      name: PropTypes.string,\n      desc: PropTypes.string,\n      status: PropTypes.string,\n      price: PropTypes.number,\n    }),\n  };\n\n  handelChange = event => {\n    // Update that fish\n    // 1. Update the fish\n    const updatedFish = {\n      /*\n        Take a copy of the current fish and over write the one thing that\n        changed. We then use computed property names to update the value of\n        the current target. This is why we added the name attribute to all\n        of the inputs. Now event.currentTarget.name returns the and we can\n        update using value. This is much better than creating a new method for\n        each field because you won't have to go update a bunch of fields\n      */\n      ...this.props.fish,\n      [event.currentTarget.name]: event.currentTarget.value,\n    };\n    this.props.updateFish(this.props.index, updatedFish);\n  };\n  render() {\n    const { desc, image, name, price, status } = this.props.fish;\n    return (\n      <div className=\"fish-edit\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          onChange={this.handelChange}\n          value={name}\n        />\n        <input\n          type=\"text\"\n          name=\"price\"\n          onChange={this.handelChange}\n          value={price}\n        />\n        <select\n          type=\"text\"\n          name=\"status\"\n          onChange={this.handelChange}\n          value={status}\n        >\n          <option value=\"available\">Fresh</option>\n          <option value=\"unavailable\">Sold Out!</option>\n        </select>\n        <textarea\n          type=\"text\"\n          name=\"image\"\n          onChange={this.handelChange}\n          value={image}\n        />\n        <input\n          type=\"text\"\n          name=\"desc\"\n          onChange={this.handelChange}\n          value={desc}\n        />\n        <button onClick={() => this.props.deleteFish(this.props.index)}>\n          Remove Fish\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default EditFishForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/*\n    Because this is a stateless functional component we need to pass props into\n    the method. We also don't use this. because it is passed in as a paramater\n  */\nconst Login = props => (\n  <nav className=\"login\">\n    <h2>Inventory Login</h2>\n    <p>Sign in to manager your stores Inventory</p>\n    <button className=\"github\" onClick={() => props.authenticate('Github')}>\n      Log in with Github\n    </button>\n    <button className=\"twitter\" onClick={() => props.authenticate('Twitter')}>\n      Log in with Twitter\n    </button>\n    <button className=\"facebook\" onClick={() => props.authenticate('Facebook')}>\n      Log in with Facebook\n    </button>\n  </nav>\n);\n\nLogin.propTypes = {\n  authenticate: PropTypes.func.isRequired,\n};\n\nexport default Login;\n","import Rebase from 're-base';\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: 'AIzaSyAcH8wfKU7IIx_AniZFqvlGtu1w_0ORvbw',\n  authDomain: 'cotd-markroddy-690e1.firebaseapp.com',\n  databaseURL: 'https://cotd-markroddy-690e1.firebaseio.com',\n  // projectId: \"cotd-markroddy\",\n  // storageBucket: \"\",\n  // messagingSenderId: \"1089483687198\",\n  // appId: \"1:1089483687198:web:0d7425141fa2869c\"\n});\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n// This is a named export\nexport { firebaseApp };\n\n// This is a default export\nexport default base;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\nimport AddFishForm from './AddFishForm';\nimport EditFishForm from './EditFishForm';\nimport Login from './Login';\nimport base, { firebaseApp } from '../base';\n\nclass Inventory extends React.Component {\n  static propTypes = {\n    updateFish: PropTypes.func,\n    deleteFish: PropTypes.func,\n    loadSampleFishes: PropTypes.func,\n    addFish: PropTypes.func,\n    fishes: PropTypes.object,\n  };\n\n  state = {\n    uid: null,\n    owner: null,\n  };\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.authHandler({ user });\n      }\n    });\n  }\n\n  authHandler = async authData => {\n    // 1. Look up the current store in the firebase database\n    const store = await base.fetch(this.props.storeId, { context: this });\n\n    // 2. Claim it if there is no owner\n    if (!store.owner) {\n      // Save it as our own\n      await base.post(`${this.props.storeId}/owner`, {\n        data: authData.user.uid,\n      });\n    }\n    // 3. Set the state of the inventory component to reflect the current user\n    this.setState({\n      uid: authData.user.uid,\n      owner: store.owner || authData.user.uid,\n    });\n  };\n\n  authenticate = provider => {\n    const authProvider = new firebase.auth[`${provider}AuthProvider`]();\n    firebaseApp\n      .auth()\n      .signInWithPopup(authProvider)\n      .then(this.authHandler);\n  };\n\n  logout = async () => {\n    await firebase.auth().signOut();\n    this.setState({\n      uid: null,\n    });\n  };\n\n  render() {\n    const logout = <button onClick={this.logout}>Log out!</button>;\n\n    // 1. Check if they are logged in\n    if (!this.state.uid) {\n      return <Login authenticate={this.authenticate} />;\n    }\n\n    // 2. Check if they are not the owner of the store\n    if (this.state.uid !== this.state.owner) {\n      return (\n        <div>\n          <p>Sorry you are not the owner!</p>\n          {logout}\n        </div>\n      );\n    }\n\n    // They must be the owner, just render the inventory\n    return (\n      /*\n        Created a new component for the add fish form so that it could be used\n        any place in the application that we wanted.\n      */\n      <div className=\"inventory\">\n        <h2>Inventory</h2>\n        {logout}\n        {/* Because the fish were in an object before we need to use\n        Object keys to turn them into an array and then we can map\n        over them. We then use the key to get each fishy by the id*/}\n        {Object.keys(this.props.fishes).map(key => (\n          <EditFishForm\n            fish={this.props.fishes[key]}\n            index={key}\n            key={key}\n            updateFish={this.props.updateFish}\n            deleteFish={this.props.deleteFish}\n          />\n        ))}\n        <AddFishForm addFish={this.props.addFish} />\n        <button onClick={this.props.loadSampleFishes}>\n          Load Sample Fishes\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Inventory;\n","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { formatPrice } from '../helpers';\n\nclass Fish extends React.Component {\n  static propTypes = {\n    addToOrder: PropTypes.func,\n    details: PropTypes.shape({\n      image: PropTypes.string,\n      name: PropTypes.string,\n      desc: PropTypes.string,\n      status: PropTypes.string,\n      price: PropTypes.number,\n    }),\n  };\n  // handleClick = () => {\n  //   this.props.addToOrder(this.props.index);\n  // };\n  render() {\n    /*\n      Can use destructing to break down the props into variables. Now we don't\n      need to write out this.props.details.name etc for each variable\n    */\n    const { image, name, price, desc, status } = this.props.details;\n    const isAvailable = status === 'available';\n    return (\n      <li className=\"menu-fish\">\n        <img src={image} alt={name} />\n        <h3 className=\"fish-name\">\n          {name}\n          {/* Used a helper class here to format the price back to USD */}\n          <span className=\"price\">{formatPrice(price)}</span>\n        </h3>\n        <p>{desc}</p>\n        {/* Below a ternary operator to show different text based on the boolean */}\n        {/* <button disabled={!isAvailable} onClick={this.handleClick}> */}\n        {/*\n          Above can be done inline as shown below. Rule of thumb is that if\n          you only need to do it once then it is ok to do it inline and not create\n          the handleClick method\n        */}\n        <button\n          disabled={!isAvailable}\n          onClick={() => this.props.addToOrder(this.props.index)}\n        >\n          {isAvailable ? ' Add to Order' : 'Sold Out!'}\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Fish;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\nimport Order from './Order';\nimport Inventory from './Inventory';\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish';\nimport base from '../base';\n\nclass App extends React.Component {\n  state = {\n    fishes: {},\n    order: {},\n  };\n\n  static propTypes = {\n    match: PropTypes.object,\n  };\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    // 1. Reinstate the local storage\n    const localStorageRef = localStorage.getItem(params.storeid);\n    if (localStorageRef) {\n      this.setState({ order: JSON.parse(localStorageRef) });\n    }\n    this.ref = base.syncState(`${params.storeid}/fishes`, {\n      context: this,\n      state: 'fishes',\n    });\n  }\n\n  componentWillUnmount() {\n    /*\n      Un-mounting is exactly why we stored the database in this.ref\n      Now when we leave it is very easy to remove it and clean up any memory\n      issues (memory leak) we may have.\n    */\n    base.removeBinding(this.ref);\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(\n      this.props.match.params.storeid,\n      JSON.stringify(this.state.order)\n    );\n  }\n\n  addFish = fish => {\n    // 1. Take a copy of the existing state\n    // Use an object spread\n    const fishes = { ...this.state.fishes };\n    // 2. Add the new fish to the fishes variable\n    fishes[`fish${Date.now()}`] = fish;\n    // 3. Set the new fishes object to state\n    this.setState({\n      // If your property and value are the same this in ES6 you can just pass it once\n      // fishes: fishes, turns into the below\n      fishes,\n    });\n  };\n\n  updateFish = (key, updatedFish) => {\n    /*\n      1. take a copy of the current state We use state be cause we are in the\n      state of the current component where this method is called.\n    */\n    const fishes = { ...this.state.fishes };\n    // 2. Update the state\n    fishes[key] = updatedFish;\n    // 3. Call setState to update the fish\n    this.setState({ fishes });\n  };\n\n  deleteFish = key => {\n    // 1. take a copy of state\n    const fishes = { ...this.state.fishes };\n    // 2. Delete fish based on key and setting the value to null (firebase)\n    fishes[key] = null;\n    // 3. Update state\n    this.setState({ fishes });\n  };\n\n  loadSampleFishes = () => {\n    this.setState({ fishes: sampleFishes });\n  };\n\n  addToOrder = key => {\n    // 1. Take a copy of state\n    const order = { ...this.state.order };\n    // 2. Either add to the order or update the number in the order.\n    // In the case below key is fish1, fish2 etc.\n    order[key] = order[key] + 1 || 1;\n    // 3. Call setState to update the state object\n    this.setState({ order });\n  };\n\n  removeFromOrder = key => {\n    // 1. take a copy of state\n    const order = { ...this.state.order };\n    /*\n      2. Remove that item from order, in this case we are not mirroring to\n        fire base we can use delete\n    */\n    delete order[key];\n    //  Call setState to update state object\n    this.setState({ order });\n  };\n\n  render() {\n    return (\n      <div className=\"catch-of-the-day\">\n        <div className=\"menu\">\n          <Header tagline=\"Fresh Seafood Market\" />\n          <ul className=\"fishes\">\n            {Object.keys(this.state.fishes).map(key => (\n              <Fish\n                key={key}\n                /*\n                  We need to access to the key you need to pass it a second\n                  time as a prop. In our case we used index.\n                */\n                index={key}\n                details={this.state.fishes[key]}\n                addToOrder={this.addToOrder}\n              >\n                {key}\n              </Fish>\n            ))}\n          </ul>\n        </div>\n        <Order\n          fishes={this.state.fishes}\n          order={this.state.order}\n          removeFromOrder={this.removeFromOrder}\n        />\n        {/*\n          You can spread all of the state into the component that you want\n          to pass things down to but you could run into some issues.\n          1. Someone could add something to state you don't need in your\n          component. You should not pass anything down to a component unless\n          you explicitly need it.\n        */}\n        {/* <Order {...this.state} /> */}\n        <Inventory\n          addFish={this.addFish}\n          loadSampleFishes={this.loadSampleFishes}\n          fishes={this.state.fishes}\n          updateFish={this.updateFish}\n          deleteFish={this.deleteFish}\n          storeId={this.props.match.params.storeid}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\n\nconst NotFound = () => (\n  <div>\n    <h2>Not Found!!!</h2>\n  </div>\n);\n\nexport default NotFound;\n","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport React from 'react';\nimport StorePicker from './StorePicker';\nimport App from './App';\nimport NotFound from './NotFound';\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={StorePicker} />\n      <Route path=\"/store/:storeid\" component={App} />\n      <Route component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","import React from 'react';\n// Could have done and referenced Component ion the class instead\n// import { component } from 'react';\nimport { render } from 'react-dom';\nimport Router from './components/Router';\nimport './css/style.css';\n/*\n  Need to have a mounting point for the actual element to mount to the page.\n  We can then use the StorePicker tag to call the StorePicker component\n*/\nrender(<Router />, document.querySelector('#main'));\n"],"sourceRoot":""}